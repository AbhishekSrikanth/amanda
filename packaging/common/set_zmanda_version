#!/usr/bin/env bash
#
# This script is run by extension's autogen and amanda enterprise's builddist
# to create the FULL_VERSION and PKG_REV files.  Amanda Enterprise ignores the
# contents of VERSION because it comes from community and is static.  Instead
# Amanda Enterprise uses git branch or tag names.  Amanda Enterprise
# Extensions does not have a VERSION file.
#
# If run from a tag, the value of VERSION is the branch or tag name
# reformatted.
#
# Extensions ./configure uses FULL_VERSION in the macro ZAMANDA_VERSION (from
# config/zmanda_version.m4) to avoid hard coding the a version string.
# Amanda Enterprise ./configure has an equivalent macro AMANDA_INIT_VERSION
#set -x

# only if called externally ...
[ $0 -ef ${BASH_SOURCE[0]} ] && ref=${1:-HEAD}

if [ "$(type -t get_yearly_tag)" != "function" ]; then
    pkg_type=${pkg_type:-rpm}
    . packaging/common/build_functions.sh
fi

[ -x "$(command -v gsed)" ] && eval "sed() { command gsed \"\$@\"; }"
[ -x "$(command -v gmake)" ] && eval "make() { command gmake \"\$@\"; }"
[ -x "$(command -v ggrep)" ] && eval "grep() { command ggrep \"\$@\"; }"

sed --version | grep -i 'GNU sed' >/dev/null || exit 1;


# Fall back to previous build (or dist build?)?
if ! [ -d .git ]; then
    [ -f FULL_VERSION -a -f PKG_REV ] && exit 0
    echo "Error: No subversion or git info available!"   #### ERROR
    exit 1
fi

git remote -v show > vcs_repo.info
git --no-pager log --max-count=1 >> vcs_repo.info

# call the version...
set_zmanda_version $ref
# eval "$(get_version_evalstr $ref)"
#printf "$VERSION" > FULL_VERSION
#printf "$BUILD_VERSION" > BUILD_VERSION
#printf "$LONG_BRANCH" > LONG_BRANCH
#printf "$REV" > REV
#printf "$PKG_REV" > PKG_REV

if [[ "$VERSION_TAR" == /tmp/*/*.tar ]] && [ -f "$VERSION_TAR" ]; then
    rm -rf ${VERSION_TAR%/*}
fi

echo "git_rev : $REV"
echo "git_branch : $BRANCH"
echo "git_long_branch : $LONG_BRANCH"

## Generate version from repository data.
if [ -z "${BRANCH}${REV}" ]; then
    # uhoh, we couldn't set the version!
    echo "Couldn't set FULL_VERSION or PKG_REV!"   #### ERROR
    exit 1
fi

# Amanda makes it easy to "force" a version string: just set FULL_VERSION
# *after* running autogen
echo "..version substitution"
echo "set version : $VERSION"

# Write out LONG_VERSION for installer build script.
echo "set branch (long) : $LONG_BRANCH"

# Write out REV for installer build script.
echo "set rev : $REV"
